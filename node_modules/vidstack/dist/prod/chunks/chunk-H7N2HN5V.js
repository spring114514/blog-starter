import { signal, effect, onDispose, peek } from 'maverick.js';
import { animationFrameThrottle, isDOMElement, setAttribute } from 'maverick.js/std';

// src/foundation/observers/class-manager.ts
var ClassManager = class {
  constructor(el) {
    this.Db = /* @__PURE__ */ new Map();
    this.Hc = signal([]);
    this.Ic = animationFrameThrottle(this.T.bind(this));
    this.Fc = el.firstChild;
    this.Gc = new MutationObserver(this.yb.bind(this));
    this.Gc.observe(this.Fc, { subtree: true, childList: true });
    effect(this.Xg.bind(this));
    onDispose(this.Xb.bind(this));
  }
  yb(records) {
    const selector = Array.from(this.Db.keys()).join(",");
    for (const record of records) {
      for (const node of record.addedNodes) {
        if (isDOMElement(node) && node.matches(selector))
          this.Ic();
      }
    }
  }
  u(selector, $class) {
    this.Db.set(selector, $class);
    this.Hc.set((c) => [...c, $class]);
    return this;
  }
  T() {
    for (const [selector, classes] of this.Db) {
      const _class = peek(classes);
      for (const el of this.Fc.querySelectorAll(selector)) {
        setAttribute(el, "class", _class);
      }
    }
  }
  Xg() {
    for (const c of this.Hc())
      c();
    this.Ic();
  }
  Xb() {
    this.Hc.set([]);
    this.Db.clear();
    this.Gc.disconnect();
  }
};

export { ClassManager };
