import { renderRadioGroup } from './chunk-KRJ7Q224.js';
import { ClassManager } from './chunk-H7N2HN5V.js';
import { RadioGroup } from './chunk-7QRO24S6.js';
import { Radio } from './chunk-HGWWXG2M.js';
import { MenuItems } from './chunk-N4YPMUQV.js';
import { useMedia } from './chunk-ZIBTY3GT.js';
import { $$_create_walker, $$_insert_at_marker_lite, $$_create_template } from 'maverick.js/dom';
import { effect } from 'maverick.js';
import { defineElement } from 'maverick.js/element';

var $$_templ = /* @__PURE__ */ $$_create_template(`<!$><span part="label"><!$></span>`);
var PlaybackRateMenuItems = class extends MenuItems {
  constructor(instance) {
    super(instance);
    this.a = useMedia();
  }
  onConnect(el) {
    effect(this.va.bind(this));
    const { radioClass, radioCheckClass } = this.$props;
    new ClassManager(el).u("media-radio", radioClass).u('[part="check"]', radioCheckClass);
  }
  va() {
    const { normalLabel } = this.$props, { playbackRate } = this.a.$store, rate = playbackRate();
    this.A.hb.set(rate === 1 ? normalLabel() : rate + "\xD7");
  }
  o(event) {
    const radioGroup = event.target;
    this.a.remote.changePlaybackRate(+radioGroup.value, event);
  }
  Z() {
    const { playbackRate } = this.a.$store;
    return playbackRate() + "";
  }
  _() {
    const { rates, normalLabel } = this.$props;
    return rates().map((rate) => ({
      value: rate + "",
      content: () => (() => {
        const [$$_root, $$_walker] = $$_create_walker($$_templ), $$_expr = $$_walker.nextNode();
        $$_insert_at_marker_lite($$_expr, () => rate === 1 ? normalLabel() : rate + "\xD7");
        return $$_root;
      })()
    }));
  }
  render() {
    const { radioGroupClass } = this.$props;
    return renderRadioGroup({
      value: this.Z.bind(this),
      options: this._.bind(this),
      radioGroupClass,
      onChange: this.o.bind(this)
    });
  }
};
PlaybackRateMenuItems.el = defineElement({
  tagName: "media-playback-rate-menu-items",
  props: {
    normalLabel: "Normal",
    rates: [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2],
    radioGroupClass: null,
    radioClass: null,
    radioCheckClass: null
  }
});
PlaybackRateMenuItems.register = [RadioGroup, Radio];

export { PlaybackRateMenuItems };
