import { VideoProvider } from './chunk-YMKOZ4UM.js';
import { RAFLoop, LIST_SELECT, LIST_ADD } from './chunk-CMYZQZ7P.js';
import { isHLSSupported, IS_CHROME } from './chunk-WSYKLWQE.js';
import { TextTrack, TEXT_TRACK_READY_STATE, TEXT_TRACK_ON_MODE_CHANGE } from './chunk-IIULWXWS.js';
import { preconnect, loadScript } from './chunk-IVW6GMZV.js';
import { peek, effect } from 'maverick.js';
import { isString, DOMEvent, listenEvent, isUndefined, isFunction, camelToKebabCase } from 'maverick.js/std';

// src/player/core/quality/symbols.ts
var SET_AUTO_QUALITY = Symbol(0);
var ENABLE_AUTO_QUALITY = Symbol(0);

// src/player/core/providers/hls/hls.ts
var toDOMEventType = (type) => camelToKebabCase(type);
var HLSController = class {
  constructor(_video) {
    this.k = _video;
    this.i = null;
    this.Tb = null;
    this.Ub = {};
    this.Vb = /* @__PURE__ */ new Set();
  }
  get instance() {
    return this.i;
  }
  setup(ctor, context) {
    this.c = context;
    const isLive = peek(context.$store.streamType).includes("live"), isLiveLowLatency = peek(context.$store.streamType).includes("ll-");
    this.i = new ctor({
      lowLatencyMode: isLiveLowLatency,
      backBufferLength: isLiveLowLatency ? 4 : isLive ? 8 : void 0,
      renderTextTracksNatively: false,
      ...this.Ub
    });
    const dispatcher = this.ef.bind(this);
    for (const event of Object.values(ctor.Events))
      this.i.on(event, dispatcher);
    this.i.on(ctor.Events.ERROR, this.ja.bind(this));
    for (const callback of this.Vb)
      callback(this.i);
    context.player.dispatchEvent(new DOMEvent("hls-instance", { detail: this.i }));
    this.i.attachMedia(this.k);
    this.i.on(ctor.Events.AUDIO_TRACK_SWITCHED, this.ff.bind(this));
    this.i.on(ctor.Events.LEVEL_SWITCHED, this.gf.bind(this));
    this.i.on(ctor.Events.LEVEL_LOADED, this.hf.bind(this));
    this.i.on(ctor.Events.NON_NATIVE_TEXT_TRACKS_FOUND, this.jf.bind(this));
    this.i.on(ctor.Events.CUES_PARSED, this.kf.bind(this));
    context.qualities[ENABLE_AUTO_QUALITY] = this.lf.bind(this);
    listenEvent(context.qualities, "change", this.Wb.bind(this));
    listenEvent(context.audioTracks, "change", this.mf.bind(this));
    this.Tb = effect(this.nf.bind(this));
  }
  nf() {
    if (!this.c.$store.live())
      return;
    const raf = new RAFLoop(this.of.bind(this));
    raf.mb();
    return raf.ga.bind(raf);
  }
  of() {
    this.c.$store.liveSyncPosition.set(this.i?.liveSyncPosition ?? Infinity);
  }
  ef(eventType, detail) {
    this.c.player.dispatchEvent(new DOMEvent(toDOMEventType(eventType), { detail }));
  }
  jf(eventType, data) {
    const event = new DOMEvent(eventType, { detail: data });
    let currentTrack = -1;
    for (let i = 0; i < data.tracks.length; i++) {
      const nonNativeTrack = data.tracks[i], init = nonNativeTrack.subtitleTrack ?? nonNativeTrack.closedCaptions, track = new TextTrack({
        id: `hls-${nonNativeTrack.kind}${i}`,
        src: init?.url,
        label: nonNativeTrack.label,
        language: init?.lang,
        kind: nonNativeTrack.kind
      });
      track[TEXT_TRACK_READY_STATE] = 2;
      track[TEXT_TRACK_ON_MODE_CHANGE] = () => {
        if (track.mode === "showing") {
          this.i.subtitleTrack = i;
          currentTrack = i;
        } else if (currentTrack === i) {
          this.i.subtitleTrack = -1;
          currentTrack = -1;
        }
      };
      if (nonNativeTrack.default)
        track.setMode("showing", event);
      this.c.textTracks.add(track, event);
    }
  }
  kf(eventType, data) {
    const track = this.c.textTracks.getById(`hls-${data.track}`);
    if (!track)
      return;
    const event = new DOMEvent(eventType, { detail: data });
    for (const cue of data.cues) {
      cue.positionAlign = "auto";
      track.addCue(cue, event);
    }
  }
  ff(eventType, data) {
    const track = this.c.audioTracks[data.id];
    if (track) {
      this.c.audioTracks[LIST_SELECT](
        track,
        true,
        new DOMEvent(eventType, { detail: data })
      );
    }
  }
  gf(eventType, data) {
    const quality = this.c.qualities[data.level];
    if (quality) {
      this.c.qualities[LIST_SELECT](
        quality,
        true,
        new DOMEvent(eventType, { detail: data })
      );
    }
  }
  hf(eventType, data) {
    if (this.c.$store.canPlay())
      return;
    const { type, live, totalduration: duration } = data.details;
    const event = new DOMEvent(eventType, { detail: data });
    this.c.delegate.d("stream-type-change", {
      detail: live ? type === "EVENT" && Number.isFinite(duration) ? "live:dvr" : "live" : "on-demand",
      trigger: event
    });
    this.c.delegate.d("duration-change", { detail: duration, trigger: event });
    const media = this.i.media;
    if (this.i.currentLevel === -1) {
      this.c.qualities[SET_AUTO_QUALITY](true, event);
    }
    for (const track of this.i.audioTracks) {
      this.c.audioTracks[LIST_ADD](
        {
          id: track.id + "",
          label: track.name,
          language: track.lang || "",
          kind: "main"
        },
        event
      );
    }
    for (const level of this.i.levels) {
      this.c.qualities[LIST_ADD](
        {
          width: level.width,
          height: level.height,
          codec: level.codecSet,
          bitrate: level.bitrate
        },
        event
      );
    }
    media.dispatchEvent(new DOMEvent("canplay", { trigger: event }));
  }
  ja(eventType, data) {
    if (data.fatal) {
      switch (data.type) {
        case "networkError":
          this.i?.startLoad();
          break;
        case "mediaError":
          this.i?.recoverMediaError();
          break;
        default:
          this.i?.destroy();
          this.i = null;
          break;
      }
    }
  }
  lf() {
    if (this.i)
      this.i.currentLevel = -1;
  }
  Wb() {
    const { qualities } = this.c;
    if (!this.i || qualities.auto)
      return;
    this.i[qualities.switch + "Level"] = qualities.selectedIndex;
    if (IS_CHROME)
      this.k.currentTime = this.k.currentTime;
  }
  mf() {
    const { audioTracks } = this.c;
    if (this.i && this.i.audioTrack !== audioTracks.selectedIndex) {
      this.i.audioTrack = audioTracks.selectedIndex;
    }
  }
  Xb() {
    if (this.c)
      this.c.qualities[ENABLE_AUTO_QUALITY] = void 0;
    this.i?.destroy();
    this.i = null;
    this.Tb?.();
    this.Tb = null;
  }
};

// src/utils/error.ts
function coerceToError(error) {
  return error instanceof Error ? error : Error(JSON.stringify(error));
}

// src/player/core/providers/hls/lib-loader.ts
var HLSLibLoader = class {
  constructor(_lib, _context, _callback) {
    this.Zb = _lib;
    this.c = _context;
    this.ha = _callback;
    this.pf();
  }
  async pf() {
    const callbacks = {
      onLoadStart: this.ia.bind(this),
      onLoaded: this.Yb.bind(this),
      onLoadError: this.qf.bind(this)
    };
    let ctor = await loadHLSScript(this.Zb, callbacks);
    if (isUndefined(ctor) && !isString(this.Zb))
      ctor = await importHLS(this.Zb, callbacks);
    if (!ctor)
      return null;
    if (!ctor.isSupported()) {
      const message = "[vidstack]: `hls.js` is not supported in this environment";
      this.c.player.dispatchEvent(new DOMEvent("hls-unsupported"));
      this.c.delegate.d("error", { detail: { message, code: 4 } });
      return null;
    }
    return ctor;
  }
  ia() {
    this.c.player.dispatchEvent(new DOMEvent("hls-lib-load-start"));
  }
  Yb(ctor) {
    this.c.player.dispatchEvent(
      new DOMEvent("hls-lib-loaded", {
        detail: ctor
      })
    );
    this.ha(ctor);
  }
  qf(e) {
    const error = coerceToError(e);
    this.c.player.dispatchEvent(
      new DOMEvent("hls-lib-load-error", {
        detail: error
      })
    );
    this.c.delegate.d("error", {
      detail: { message: error.message, code: 4 }
    });
  }
};
async function importHLS(loader, callbacks = {}) {
  if (isUndefined(loader))
    return void 0;
  callbacks.onLoadStart?.();
  if (loader.prototype && loader.prototype !== Function) {
    callbacks.onLoaded?.(loader);
    return loader;
  }
  try {
    const ctor = (await loader())?.default;
    if (ctor && !!ctor.isSupported) {
      callbacks.onLoaded?.(ctor);
    } else {
      throw Error(
        false ? "[vidstack] failed importing `hls.js`. Dynamic import returned invalid constructor." : ""
      );
    }
    return ctor;
  } catch (err) {
    callbacks.onLoadError?.(err);
  }
  return void 0;
}
async function loadHLSScript(src, callbacks = {}) {
  if (!isString(src))
    return void 0;
  callbacks.onLoadStart?.();
  try {
    await loadScript(src);
    if (!isFunction(window.Hls)) {
      throw Error(
        false ? "[vidstack] failed loading `hls.js`. Could not find a valid `Hls` constructor on window" : ""
      );
    }
    const ctor = window.Hls;
    callbacks.onLoaded?.(ctor);
    return ctor;
  } catch (err) {
    callbacks.onLoadError?.(err);
  }
  return void 0;
}

// src/player/core/providers/hls/provider.ts
var HLS_PROVIDER = Symbol(0);
var JS_DELIVR_CDN = "https://cdn.jsdelivr.net";
var _a;
var HLSProvider = class extends VideoProvider {
  constructor() {
    super(...arguments);
    this[_a] = true;
    this.sd = null;
    this.D = new HLSController(this.video);
    this.Xa = `${JS_DELIVR_CDN}/npm/hls.js@^1.0.0/dist/hls${".min.js"}`;
  }
  /**
   * The `hls.js` constructor.
   */
  get ctor() {
    return this.sd;
  }
  /**
   * The current `hls.js` instance.
   */
  get instance() {
    return this.D.instance;
  }
  get type() {
    return "hls";
  }
  get canLiveSync() {
    return true;
  }
  /**
   * The `hls.js` configuration object.
   *
   * @see {@link https://github.com/video-dev/hls.js/blob/master/docs/API.md#fine-tuning}
   */
  get config() {
    return this.D.Ub;
  }
  set config(config) {
    this.D.Ub = config;
  }
  /**
   * The `hls.js` constructor (supports dynamic imports) or a URL of where it can be found.
   *
   * @defaultValue `https://cdn.jsdelivr.net/npm/hls.js@^1.0.0/dist/hls.min.js`
   */
  get library() {
    return this.Xa;
  }
  set library(library) {
    this.Xa = library;
  }
  preconnect() {
    if (!isString(this.Xa))
      return;
    preconnect(this.Xa);
  }
  setup(context) {
    super.setup(context);
    new HLSLibLoader(this.Xa, context, (ctor) => {
      this.sd = ctor;
      this.D.setup(ctor, context);
      context.delegate.d("provider-setup", { detail: this });
      const src = peek(context.$store.source);
      if (src)
        this.loadSource(src);
    });
  }
  async loadSource({ src }) {
    if (!isString(src))
      return;
    this.D.instance?.loadSource(src);
  }
  /**
   * The given callback is invoked when a new `hls.js` instance is created and right before it's
   * attached to media.
   */
  onInstance(callback) {
    const instance = this.D.instance;
    if (instance)
      callback(instance);
    this.D.Vb.add(callback);
    return () => this.D.Vb.delete(callback);
  }
  destroy() {
    this.D.Xb();
  }
};
_a = HLS_PROVIDER;
/**
 * Whether `hls.js` is supported in this environment.
 */
HLSProvider.supported = isHLSSupported();

export { ENABLE_AUTO_QUALITY, HLSProvider, HLS_PROVIDER, SET_AUTO_QUALITY, coerceToError };
