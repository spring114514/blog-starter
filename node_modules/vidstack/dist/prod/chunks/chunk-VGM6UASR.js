import { signal, effect } from 'maverick.js';
import { ComponentController } from 'maverick.js/element';
import { listenEvent, setAttribute } from 'maverick.js/std';

// src/foundation/observers/focus-visible.ts
var $keyboard = signal(false);
{
  listenEvent(document, "pointerdown", () => {
    $keyboard.set(false);
  });
  listenEvent(document, "keydown", (e) => {
    if (e.metaKey || e.altKey || e.ctrlKey)
      return;
    $keyboard.set(true);
  });
}
var FocusVisibleController = class extends ComponentController {
  constructor() {
    super(...arguments);
    this.Ra = signal(false);
  }
  onConnect(el) {
    effect(() => {
      if (!$keyboard()) {
        this.Ra.set(false);
        updateFocusAttr(el, false);
        this.listen("pointerenter", this.Kb.bind(this));
        this.listen("pointerleave", this.Lb.bind(this));
        return;
      }
      const active = document.activeElement === el;
      this.Ra.set(active);
      updateFocusAttr(el, active);
      this.listen("focus", this.Sa.bind(this));
      this.listen("blur", this.ze.bind(this));
    });
  }
  focused() {
    return this.Ra();
  }
  Sa() {
    this.Ra.set(true);
    updateFocusAttr(this.el, true);
  }
  ze() {
    this.Ra.set(false);
    updateFocusAttr(this.el, false);
  }
  Kb() {
    updateHoverAttr(this.el, true);
  }
  Lb() {
    updateHoverAttr(this.el, false);
  }
};
function updateFocusAttr(el, isFocused) {
  setAttribute(el, "data-focus", isFocused);
  setAttribute(el, "data-hocus", isFocused);
}
function updateHoverAttr(el, isHovering) {
  setAttribute(el, "data-hocus", isHovering);
  setAttribute(el, "data-hover", isHovering);
}

export { FocusVisibleController };
