import { sliderProps, Slider } from './chunk-WIRFNMNS.js';
import { sliderValueFormatContext } from './chunk-U43VNZZW.js';
import { SliderStoreFactory } from './chunk-53B74NMI.js';
import { functionThrottle } from './chunk-JELAJF2G.js';
import { round } from './chunk-CVLY5S52.js';
import { formatSpokenTime, formatTime } from './chunk-JY53PGKC.js';
import { ClassManager } from './chunk-H7N2HN5V.js';
import { onTrackChapterChange } from './chunk-NOPW2CG3.js';
import { setAttributeIfEmpty, scopedRaf } from './chunk-HQQTSFXD.js';
import { $$_computed, $$_peek, $$_clone, $$_effect, $$_attr, $$_insert_lite, $$_style, $$_create_template } from 'maverick.js/dom';
import { signal, provideContext, effect, peek, onDispose } from 'maverick.js';
import { defineElement, defineProp } from 'maverick.js/element';
import { listenEvent, setAttribute, isNull, animationFrameThrottle } from 'maverick.js/std';

var $$_templ = /* @__PURE__ */ $$_create_template(`<div part="chapters"></div>`);
var $$_templ_2 = /* @__PURE__ */ $$_create_template(`<div part="chapter-container"><div part="chapter"><div part="track"></div><div part="track track-fill"></div><div part="track track-progress"></div></div></div>`);
var SliderChaptersRenderer = class {
  constructor(_media, _slider, _onChange) {
    this.a = _media;
    this.I = _slider;
    this.o = _onChange;
    this.ea = [];
    this.eb = [];
    this.ch = animationFrameThrottle((bufferedPercent) => {
      for (let i = 0; i < this.eb.length; i++) {
        const el = this.eb[i].querySelector('[part~="track-progress"]'), percent = this.Jc(this.ea[i], bufferedPercent);
        el.style.width = percent + "%";
      }
    });
  }
  render(cues, $class) {
    return cues?.length ? $$_peek(
      () => (() => {
        const $$_root = $$_clone($$_templ);
        $$_effect(() => $$_attr($$_root, "class", $class()));
        $$_insert_lite($$_root, () => this.Yg(cues));
        return $$_root;
      })()
    ) : null;
  }
  Yg(cues) {
    this.ea = this.Zg(cues);
    const firstChapter = this.ea[0];
    this.o(firstChapter && firstChapter.startTime === 0 ? firstChapter.text : "");
    const endTime = this.ea[this.ea.length - 1].endTime;
    for (const chapter of this.ea) {
      const el = this._g(chapter, endTime);
      this.eb.push(el);
    }
    effect(this.$g.bind(this));
    onDispose(() => {
      this.eb = [];
    });
    return this.eb;
  }
  _g(chapter, endTime) {
    const width = round(this.ah(chapter, endTime), 5) + "%", $fill = this.bh.bind(this, chapter);
    return (() => {
      const $$_root = $$_clone($$_templ_2), $$_el = $$_root.firstChild, $$_el_2 = $$_el.firstChild, $$_el_3 = $$_el_2.nextSibling;
      $$_style($$_root, "width", width);
      $$_effect(() => $$_style($$_el_3, "width", $fill()));
      return $$_root;
    })();
  }
  bh(chapter) {
    let fillPercent = this.I.fillPercent(), pointing = this.I.pointing(), pointerPercent = pointing ? this.I.pointerPercent() : fillPercent, percent = this.Jc(chapter, fillPercent), result = percent + "%";
    if (pointing) {
      percent = this.Jc(chapter, pointerPercent);
    }
    if (percent > 0 && percent < 100) {
      this.o(chapter.text);
    }
    return result;
  }
  $g() {
    this.ch(this.dh());
  }
  dh() {
    const { bufferedEnd, duration } = this.a;
    return Math.min(bufferedEnd() / Math.max(duration(), 1), 1) * 100;
  }
  ah(cue, endTime) {
    return (cue.endTime - cue.startTime) / endTime * 100;
  }
  Jc(cue, percent) {
    const lastChapter = this.ea[this.ea.length - 1], startPercent = cue.startTime / lastChapter.endTime * 100, endPercent = cue.endTime / lastChapter.endTime * 100;
    return Math.max(
      0,
      percent >= endPercent ? 100 : (percent - startPercent) / (endPercent - startPercent) * 100
    );
  }
  Zg(cues) {
    const chapters = [];
    for (let i = 0; i < cues.length - 1; i++) {
      const currentCue = cues[i], nextCue = cues[i + 1];
      chapters.push(currentCue);
      if (nextCue) {
        const timeDiff = nextCue.startTime - currentCue.endTime;
        if (timeDiff > 0) {
          chapters.push(new window.VTTCue(currentCue.endTime, currentCue.endTime + timeDiff, ""));
        }
      }
    }
    chapters.push(cues[cues.length - 1]);
    return chapters;
  }
};

// src/player/ui/sliders/time-slider/time-slider.tsx
var TimeSlider = class extends Slider {
  constructor(instance) {
    super(instance);
    this.tc = true;
    this.xg = true;
    this.m = signal(null);
    this.Mc = false;
    // -------------------------------------------------------------------------------------------
    // Chapters
    // -------------------------------------------------------------------------------------------
    this.gb = null;
    this.ge = signal("");
    provideContext(sliderValueFormatContext, {
      value: this.eh.bind(this),
      time: this.fh.bind(this)
    });
  }
  onAttach(el) {
    setAttributeIfEmpty(el, "aria-label", "Media time");
    super.onAttach(el);
    this.ee = new SliderChaptersRenderer(
      this.a.$store,
      this.$store,
      this.ge.set
    );
    this.setAttributes({
      "data-chapters": this.gh.bind(this)
    });
    this.setStyles({
      "--media-buffered-percent": this.hh.bind(this)
    });
    effect(this.bb.bind(this));
    effect(this.ih.bind(this));
    effect(this.Lc.bind(this));
    scopedRaf(() => {
      effect(this.jh.bind(this));
    });
  }
  hh() {
    const { bufferedEnd, duration } = this.a.$store;
    return round(Math.min(bufferedEnd() / Math.max(duration(), 1), 1) * 100, 3) + "%";
  }
  gh() {
    const { duration } = this.a.$store;
    this.fe?.Ic();
    return this.m()?.cues.length && Number.isFinite(duration()) && duration() > 0;
  }
  onConnect(el) {
    super.onConnect(el);
    this.ma();
    listenEvent(this.a.textTracks, "mode-change", this.ma.bind(this));
    const { chapterContainerClass, chapterClass, trackClass, trackFillClass, trackProgressClass } = this.$props;
    this.fe = new ClassManager(el).u('[part="chapter-container"]', chapterContainerClass).u('[part="chapter"]', chapterClass).u('[part="track"]', trackClass).u('[part~="track-fill"]', trackFillClass).u('[part~="track-progress"]', trackProgressClass);
  }
  render() {
    const tracks = super.render(), { chaptersClass } = this.$props;
    return [$$_computed(() => this.ee.render(this.m()?.cues, chaptersClass)), tracks];
  }
  ih() {
    this.Kc = functionThrottle(
      this.aa.bind(this),
      this.$props.seekingRequestThrottle()
    );
  }
  bb() {
    const { currentTime } = this.a.$store, { value, dragging } = this.$store, newValue = this.kh(currentTime());
    if (!peek(dragging)) {
      value.set(newValue);
      this.dispatch("value-change", { detail: newValue });
    }
  }
  jh() {
    const player = this.a.player;
    player && this.Q && setAttribute(player, "data-preview", this.$store.interactive());
  }
  aa(time, event) {
    this.a.remote.seeking(time, event);
  }
  lh(time, percent, event) {
    this.Kc.cancel();
    const { live } = this.a.$store;
    if (live() && percent >= 99) {
      this.a.remote.seekToLiveEdge(event);
      return;
    }
    this.a.remote.seek(time, event);
  }
  Xd(event) {
    const { pauseWhileDragging } = this.$props;
    if (pauseWhileDragging()) {
      const { paused } = this.a.$store;
      this.Mc = !paused();
      this.a.remote.pause(event);
    }
  }
  qc(event) {
    this.Kc(this.fb(event.detail), event);
  }
  rc(event) {
    const percent = event.detail;
    this.lh(this.fb(percent), percent, event);
    const { pauseWhileDragging } = this.$props;
    if (pauseWhileDragging() && this.Mc) {
      this.a.remote.play(event);
      this.Mc = false;
    }
  }
  pc(event) {
    const { dragging } = this.$store;
    if (dragging() || !event.trigger)
      return;
    this.rc(event);
  }
  // -------------------------------------------------------------------------------------------
  // Props
  // -------------------------------------------------------------------------------------------
  Ab() {
    const value = this.$props.step() / this.a.$store.duration() * 100;
    return Number.isFinite(value) ? value : 1;
  }
  _d() {
    const value = this.$props.keyStep() / this.a.$store.duration() * 100;
    return Number.isFinite(value) ? value : 1;
  }
  Wd(value) {
    return round(value, 3);
  }
  p() {
    const { canSeek } = this.a.$store;
    return super.p() || !canSeek();
  }
  // -------------------------------------------------------------------------------------------
  // ARIA
  // -------------------------------------------------------------------------------------------
  wc() {
    return 0;
  }
  xc() {
    return 100;
  }
  $d() {
    const time = this.fb(this.$store.value()), { duration } = this.a.$store;
    return Number.isFinite(time) ? `${formatSpokenTime(time)} out of ${formatSpokenTime(duration())}` : "live";
  }
  // -------------------------------------------------------------------------------------------
  // Format
  // -------------------------------------------------------------------------------------------
  fb(percent) {
    const { duration } = this.a.$store;
    return Math.round(percent / 100 * duration());
  }
  kh(time) {
    const { liveEdge, duration } = this.a.$store, rate = Math.max(0, Math.min(1, liveEdge() ? 1 : Math.min(time, duration()) / duration()));
    return Number.isNaN(rate) ? 0 : Number.isFinite(rate) ? rate * 100 : 100;
  }
  eh(percent) {
    const time = this.fb(percent), { live, duration } = this.a.$store;
    return Number.isFinite(time) ? (live() ? time - duration() : time).toFixed(0) : "LIVE";
  }
  fh(percent, padHours, padMinutes, showHours) {
    const time = this.fb(percent), { live, duration } = this.a.$store, value = live() ? time - duration() : time;
    return Number.isFinite(time) ? `${value < 0 ? "-" : ""}${formatTime(
      Math.abs(value),
      padHours,
      isNull(padMinutes) ? Math.abs(value) >= 3600 : padMinutes,
      showHours
    )}` : "LIVE";
  }
  ma() {
    onTrackChapterChange(this.a.textTracks, peek(this.m), this.m.set);
  }
  Lc() {
    this.m();
    this.gb = this.el?.querySelector('[part="chapter-title"]') ?? null;
    if (!this.gb)
      return;
    effect(this.mh.bind(this));
    return () => {
      this.gb.textContent = "";
      this.gb = null;
    };
  }
  mh() {
    this.gb.textContent = this.ge();
  }
};
TimeSlider.el = defineElement({
  tagName: "media-time-slider",
  props: {
    ...sliderProps,
    min: defineProp({ value: 0, attribute: false }),
    max: defineProp({ value: 100, attribute: false }),
    value: defineProp({ value: 0, attribute: false }),
    pauseWhileDragging: false,
    seekingRequestThrottle: 100,
    chaptersClass: null,
    chapterContainerClass: null,
    chapterClass: null
  },
  store: SliderStoreFactory
});

export { TimeSlider };
